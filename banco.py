import winsound
from datetime import datetime
from abc import ABC, abstractmethod

# --- DECORADOR MODIFICADO ---
def log_transacao(funcao):
    """
    MODIFICADO: Decorador que salva em um arquivo de log (log.txt)
    as informa√ß√µes de uma fun√ß√£o chamada: data, hora, nome, argumentos e retorno.
    """
    def wrapper(*args, **kwargs):
        # 1. Captura a data e hora atuais
        timestamp = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        
        # 2. Captura o nome da fun√ß√£o
        nome_funcao = funcao.__name__
        
        # Executa a fun√ß√£o original para obter o resultado
        resultado = funcao(*args, **kwargs)
        
        # 3. Captura os argumentos da fun√ß√£o (formatando para leitura)
        # Usamos repr() para ter uma representa√ß√£o fiel dos objetos
        args_formatados = ", ".join(repr(a) for a in args)
        kwargs_formatados = ", ".join(f"{k}={v!r}" for k, v in kwargs.items())
        argumentos_completos = ", ".join(filter(None, [args_formatados, kwargs_formatados]))

        # 4. Captura o valor retornado pela fun√ß√£o
        valor_retornado = repr(resultado)

        # Monta a string de log completa
        log_entry = (
            f"Data/Hora: {timestamp} | "
            f"Fun√ß√£o: {nome_funcao} | "
            f"Argumentos: ({argumentos_completos}) | "
            f"Retorno: {valor_retornado}\n" # 7. Garante a nova linha
        )
        
        try:
            # 5 e 6. Abre 'log.txt' em modo de 'append' (adicionar ao final)
            with open("log.txt", "a", encoding="utf-8") as arquivo_log:
                arquivo_log.write(log_entry)
        except Exception as e:
            print(f"--- ERRO CR√çTICO AO GRAVAR LOG: {e} ---")

        return resultado
    return wrapper


# --- Efeitos Sonoros (mantidos do c√≥digo original) ---

def tocar_sucesso():
    """Toca um som de sucesso."""
    # O winsound s√≥ funciona no Windows. Em outros sistemas, isso pode gerar um erro.
    # Adicionamos um try-except para evitar que o programa quebre.
    try:
        winsound.Beep(1000, 200)
        winsound.Beep(1200, 200)
    except ImportError:
        pass # Ignora o erro se a biblioteca n√£o for encontrada

def tocar_erro():
    """Toca um som de erro."""
    try:
        winsound.Beep(400, 400)
    except ImportError:
        pass

def tocar_despedida():
    """Toca um som de despedida."""
    try:
        winsound.Beep(1000, 300)
        winsound.Beep(800, 300)
    except ImportError:
        pass

# --- Modelagem das Classes (Baseado no UML) ---

class Historico:
    """Registra as transa√ß√µes de uma conta."""
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        """Adiciona uma transa√ß√£o ao hist√≥rico."""
        timestamp = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data": timestamp,
            }
        )

    def gerar_relatorio(self, tipo_transacao=None):
        """
        Gera um relat√≥rio de transa√ß√µes, opcionalmente filtrado por tipo.
        Usa 'yield' para retornar uma transa√ß√£o de cada vez.
        """
        for transacao in self._transacoes:
            if tipo_transacao is None or transacao["tipo"].lower() == tipo_transacao.lower():
                yield transacao


class Transacao(ABC):
    """Classe abstrata para todas as transa√ß√µes."""
    @property
    @abstractmethod
    def valor(self):
        pass

    @abstractmethod
    def registrar(self, conta):
        pass

class Deposito(Transacao):
    """Classe para transa√ß√µes de dep√≥sito."""
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor
    
    def __repr__(self):
        return f"Deposito(valor={self.valor})"

    def registrar(self, conta):
        if conta.depositar(self.valor):
            conta.historico.adicionar_transacao(self)

class Saque(Transacao):
    """Classe para transa√ß√µes de saque."""
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor
    
    def __repr__(self):
        return f"Saque(valor={self.valor})"

    def registrar(self, conta):
        if conta.sacar(self.valor):
            conta.historico.adicionar_transacao(self)

class Conta:
    """Classe base para contas banc√°rias."""
    def __init__(self, numero, cliente):
        self._saldo = 0.0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()

    def __repr__(self):
        return f"<Conta(numero={self.numero}, cliente='{self.cliente.nome}')>"

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        """Realiza um saque na conta."""
        if valor <= 0:
            print("‚ùå Valor de saque inv√°lido.")
            tocar_erro()
            return False
        if valor > self._saldo:
            print("‚ö†Ô∏è Saldo insuficiente para o saque.")
            tocar_erro()
            return False
        
        self._saldo -= valor
        print(f"üí∏ Saque de R$ {valor:.2f} realizado com sucesso!")
        return True

    def depositar(self, valor):
        """Realiza um dep√≥sito na conta."""
        if valor > 0:
            self._saldo += valor
            print(f"‚ú® Dep√≥sito de R$ {valor:.2f} realizado com sucesso!")
            return True
        
        print("‚ùå Valor de dep√≥sito inv√°lido.")
        tocar_erro()
        return False

class ContaCorrente(Conta):
    """Conta corrente com limites espec√≠ficos."""
    def __init__(self, numero, cliente, limite=500, limite_saques=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        """Sobrescreve o m√©todo sacar para incluir valida√ß√µes de limite."""
        saques_realizados = len(
            [transacao for transacao in self.historico.transacoes 
             if transacao["tipo"] == "Saque"]
        )

        if valor > self.limite:
            print(f"üö´ O valor do saque excede o limite de R$ {self.limite:.2f}.")
            tocar_erro()
            return False
        
        if saques_realizados >= self.limite_saques:
            print(f"‚ùå Limite de {self.limite_saques} saques di√°rios atingido.")
            tocar_erro()
            return False

        # Chama o m√©todo sacar da classe pai (Conta) se todas as valida√ß√µes passarem
        return super().sacar(valor)
        
    def __str__(self):
        return f"Ag√™ncia: {self.agencia} | C/C: {self.numero} | Titular: {self.cliente.nome}"


class Cliente:
    """Classe para representar um cliente do banco."""
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []
        # Adicionado para que o objeto Cliente tenha um nome para o log
        self.nome = "Cliente sem nome definido"

    def __repr__(self):
        return f"<Cliente(nome='{self.nome}')>"

    # Decorador aplicado na fun√ß√£o que efetivamente faz o registro da transa√ß√£o
    @log_transacao
    def realizar_transacao(self, conta, transacao):
        """
        Inicia o processo de uma transa√ß√£o, agora com valida√ß√£o de limite di√°rio.
        """
        hoje = datetime.now().date()
        transacoes_hoje = [
            t for t in conta.historico.transacoes
            if datetime.strptime(t['data'], '%d/%m/%Y %H:%M:%S').date() == hoje
        ]
        if len(transacoes_hoje) >= 10:
            print("\n‚ùå Voc√™ excedeu o n√∫mero de 10 transa√ß√µes permitidas para hoje.")
            tocar_erro()
            return

        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        """Adiciona uma conta para o cliente."""
        self.contas.append(conta)

class PessoaFisica(Cliente):
    """Cliente do tipo Pessoa F√≠sica."""
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf

    def __repr__(self):
        return f"<PessoaFisica(nome='{self.nome}', cpf='{self.cpf}')>"


# --- Fun√ß√µes do Menu (Adaptadas para usar Classes) ---

def menu_deposito(cliente):
    """Gerencia a opera√ß√£o de dep√≥sito."""
    if not cliente.contas:
        print("üö´ Cliente n√£o possui conta. Crie uma conta primeiro.")
        tocar_erro()
        return

    conta_ativa = cliente.contas[0]

    try:
        valor = float(input("üü¢ Valor do dep√≥sito: R$ "))
        deposito = Deposito(valor)
        cliente.realizar_transacao(conta_ativa, deposito)
        tocar_sucesso()
    except ValueError:
        print("‚ùå Digite um valor num√©rico v√°lido.")
        tocar_erro()


def menu_saque(cliente):
    """Gerencia a opera√ß√£o de saque."""
    if not cliente.contas:
        print("üö´ Cliente n√£o possui conta. Crie uma conta primeiro.")
        tocar_erro()
        return
        
    conta_ativa = cliente.contas[0]
    
    try:
        valor = float(input("üî¥ Valor do saque: R$ "))
        saque = Saque(valor)
        cliente.realizar_transacao(conta_ativa, saque)
    except ValueError:
        print("‚ùå Digite um valor num√©rico v√°lido.")
        tocar_erro()

def menu_exibir_extrato(cliente):
    """Exibe o extrato da conta do cliente."""
    if not cliente.contas:
        print("üö´ Cliente n√£o possui conta.")
        tocar_erro()
        return

    conta_ativa = cliente.contas[0]
    print("\nüìú === EXTRATO BANC√ÅRIO SC === üìú")
    
    transacoes = conta_ativa.historico.transacoes
    if not transacoes:
        print("üö´ Nenhuma movimenta√ß√£o registrada.")
    else:
        for transacao in transacoes:
            tipo = "üîª Saque" if transacao['tipo'] == 'Saque' else "‚úÖ Dep√≥sito"
            print(f"{tipo}: R$ {transacao['valor']:.2f} | {transacao['data']}")

    print(f"\nüí∞ Saldo atual: R$ {conta_ativa.saldo:.2f}")
    print("üî∑============================üî∑\n")


def menu_gerar_relatorio(cliente):
    """
    Exibe um relat√≥rio de transa√ß√µes usando o gerador, com op√ß√£o de filtro.
    """
    if not cliente.contas:
        print("üö´ Cliente n√£o possui conta.")
        tocar_erro()
        return

    conta_ativa = cliente.contas[0]
    
    tipo_filtro = input("üîé Deseja filtrar por tipo? (d para dep√≥sito, s para saque, ou enter para todos): ").lower().strip()
    
    if tipo_filtro == 'd':
        filtro = "Deposito"
    elif tipo_filtro == 's':
        filtro = "Saque"
    else:
        filtro = None

    print("\nüìë === RELAT√ìRIO DE TRANSA√á√ïES === üìë")
    
    relatorio = conta_ativa.historico.gerar_relatorio(filtro)
    
    houve_transacao = False
    for transacao in relatorio:
        houve_transacao = True
        tipo = "üîª Saque" if transacao['tipo'] == 'Saque' else "‚úÖ Dep√≥sito"
        print(f"{tipo}: R$ {transacao['valor']:.2f} | Data: {transacao['data']}")

    if not houve_transacao:
        print("üö´ Nenhuma transa√ß√£o encontrada para este filtro.")

    print("üî∑=================================üî∑\n")


def criar_novo_cliente(clientes):
    """Cria e cadastra um novo cliente (Pessoa F√≠sica)."""
    cpf = input("üîé Informe o CPF (somente n√∫meros): ").strip()
    cpf = ''.join(filter(str.isdigit, cpf))

    if filtrar_cliente(cpf, clientes):
        print("‚ö†Ô∏è CPF j√° cadastrado!")
        tocar_erro()
        return

    nome = input("üë§ Nome completo: ")
    nascimento = input("üìÖ Data de nascimento (dd/mm/aaaa): ")
    endereco = input("üè† Endere√ßo (logradouro, nro - bairro - cidade/UF): ")

    novo_cliente = PessoaFisica(nome=nome, data_nascimento=nascimento, cpf=cpf, endereco=endereco)
    clientes.append(novo_cliente)
    print("‚úÖ Cliente criado com sucesso!")
    tocar_sucesso()

def criar_nova_conta(numero_conta, clientes, contas):
    """Cria uma nova conta corrente para um cliente."""
    cpf = input("üîé Informe o CPF do titular da conta: ").strip()
    cpf = ''.join(filter(str.isdigit, cpf))
    
    cliente = filtrar_cliente(cpf, clientes)
    if not cliente:
        print("üö´ Cliente n√£o encontrado. Cadastre o cliente primeiro.")
        tocar_erro()
        return

    nova_conta = ContaCorrente.nova_conta(cliente=cliente, numero=numero_conta)
    contas.append(nova_conta)
    cliente.adicionar_conta(nova_conta)

    print(f"‚úÖ Conta criada com sucesso para {cliente.nome}!")
    print(f"Ag√™ncia: {nova_conta.agencia}, Conta: {nova_conta.numero}")
    tocar_sucesso()


def filtrar_cliente(cpf, clientes):
    """Busca um cliente na lista pelo CPF."""
    clientes_filtrados = [cliente for cliente in clientes if isinstance(cliente, PessoaFisica) and cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None

def login(clientes):
    """Realiza o login do cliente no sistema."""
    print("\nüîê LOGIN NO SISTEMA")
    cpf = input("Informe seu CPF (somente n√∫meros): ").strip()
    cpf = ''.join(filter(str.isdigit, cpf))

    cliente = filtrar_cliente(cpf, clientes)
    if cliente:
        print(f"\nüëã Bem-vindo(a) ao banco SC, {cliente.nome}!")
        tocar_sucesso()
        return cliente
    
    print("\n‚ùå CPF n√£o cadastrado. Por favor, crie um usu√°rio.")
    tocar_erro()
    return None


def main():
    """Fun√ß√£o principal que executa o sistema banc√°rio."""
    clientes = []
    contas = []
    
    cliente_logado = None
    while not cliente_logado:
        print("""
üü¢ BEM-VINDO AO BANCO VIRTUAL SC üü¢

[1] üîê Fazer login com CPF
[2] üìù Criar novo cliente
[3] ‚ùå Sair
""")
        escolha = input("Escolha uma op√ß√£o: ").strip()

        if escolha == "1":
            cliente_logado = login(clientes)
        elif escolha == "2":
            criar_novo_cliente(clientes)
        elif escolha == "3":
            print("üëã Saindo do sistema. At√© logo!")
            tocar_despedida()
            exit()
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
            tocar_erro()

    menu = """
üí≥ MENU DO BANCO SC

[d] üí∞ Depositar
[s] üí∏ Sacar
[e] üìú Extrato
[r] üìë Gerar Relat√≥rio
[u] üë§ Criar Novo Cliente
[c] üè¶ Criar Nova Conta
[q] ‚ùå Sair

=> """
    
    while True:
        opcao = input(menu).strip().lower()

        if opcao == "d":
            menu_deposito(cliente_logado)
        elif opcao == "s":
            menu_saque(cliente_logado)
        elif opcao == "e":
            menu_exibir_extrato(cliente_logado)
        elif opcao == "r":
            menu_gerar_relatorio(cliente_logado)
        elif opcao == "u":
            criar_novo_cliente(clientes) 
        elif opcao == "c":
            numero_conta = len(contas) + 1
            criar_nova_conta(numero_conta, clientes, contas)
        elif opcao == "q":
            print("\nüëã Obrigado por utilizar nosso sistema banc√°rio SC! Volte logo!")
            tocar_despedida()
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
            tocar_erro()

if __name__ == "__main__":
    main()